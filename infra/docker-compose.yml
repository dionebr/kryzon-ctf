version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: kryzon-postgres
    environment:
      POSTGRES_DB: kryzon_ctf
      POSTGRES_USER: kryzon_user
      POSTGRES_PASSWORD: Kr7z0n_S3cur3_P455w0rd
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - kryzon-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kryzon_user -d kryzon_ctf"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Traefik Reverse Proxy
  traefik:
    image: traefik:v3.0
    container_name: kryzon-traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=kryzon-network"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--log.level=INFO"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/config:/etc/traefik/dynamic
    networks:
      - kryzon-network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.ctf.local`)"
      - "traefik.http.routers.traefik.entrypoints=web"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"

  # Backend API
  backend:
    build: 
      context: ../backend
      dockerfile: dockerfile
    container_name: kryzon-backend
    environment:
      - NODE_ENV=production
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=kryzon_ctf
      - DATABASE_USER=kryzon_user
      - DATABASE_PASSWORD=Kr7z0n_S3cur3_P455w0rd
      - JWT_SECRET=Kryz0n_JWT_Sup3r_S3cr3t_K3y_2024_CTF_Pl4tf0rm
      - PORT=5000
      - DOCKER_SOCKET_PATH=/var/run/docker.sock
      - DEFAULT_TTL_HOURS=2
      - MAX_INSTANCES_PER_USER=3
      - INSTANCE_PORT_RANGE_START=18000
      - INSTANCE_PORT_RANGE_END=19000
      - CTF_DOMAIN=ctf.local
      - CTF_HOST_PREFIX=vm-
      - BCRYPT_ROUNDS=12
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
      - LOG_LEVEL=info
      - LOG_FILE_PATH=./logs/kryzon.log
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - backend_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - kryzon-network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.ctf.local`) || PathPrefix(`/api`)"
      - "traefik.http.routers.backend.entrypoints=web"
      - "traefik.http.services.backend.loadbalancer.server.port=5000"
      - "traefik.http.middlewares.backend-cors.headers.accesscontrolalloworigin=*"
      - "traefik.http.middlewares.backend-cors.headers.accesscontrolallowmethods=GET,POST,PUT,DELETE,OPTIONS"
      - "traefik.http.middlewares.backend-cors.headers.accesscontrolallowheaders=*"
      - "traefik.http.routers.backend.middlewares=backend-cors"

  # Frontend React App
  frontend:
    build: 
      context: ../frontend
      dockerfile: Dockerfile
    container_name: kryzon-frontend
    environment:
      - REACT_APP_API_URL=http://api.ctf.local
      - REACT_APP_CTF_DOMAIN=ctf.local
    ports:
      - "3000:80"  # Temporary direct access for testing
    depends_on:
      - backend
    networks:
      - kryzon-network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`ctf.local`) || Host(`www.ctf.local`)"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"

  # Redis for session storage and caching
  redis:
    image: redis:7-alpine
    container_name: kryzon-redis
    command: redis-server --appendonly yes --requirepass Kr7z0n_R3d1s_P455w0rd
    volumes:
      - redis_data:/data
    networks:
      - kryzon-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Portainer for Docker management (optional)
  portainer:
    image: portainer/portainer-ce:latest
    container_name: kryzon-portainer
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - kryzon-network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`portainer.ctf.local`)"
      - "traefik.http.routers.portainer.entrypoints=web"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"

networks:
  kryzon-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  portainer_data:
    driver: local
  backend_logs:
    driver: local